@using FiscalLabApp.Services
@using FiscalLabApp.Enums
@using FiscalLabApp.Helpers
@inject NavigationManager NavigationManager
@inject ApplicationContextAccessor ApplicationContextAccessor
@inject IJSRuntime JsRuntime

@inject SyncService SyncService
@inject IToastService ToastService

<nav class="navbar shadow mb-4" style="background-color: #ffffff;">
    <div class="container-fluid">
        <a class="navbar-brand text-secondary fw-bold" @onclick="OpenVisits">
            <img src="icon-192.png" alt="Fiscal Lab" width="48" height="48">
            Grupo Esdra
        </a>
        <form class="d-flex" role="search">
            <button class="btn btn-sm btn-outline-success" type="button" @onclick="SynAsync" disabled="@(!ApplicationContextAccessor.IsOnline())">Sincronizar</button>
        </form>
    </div>
</nav>

@code {
    
    private bool _collapseNavMenu = true;
    private string? NavBarCssClass => _collapseNavMenu ? null : "show";
    private string? NavButtonCssClass => _collapseNavMenu ? "collapsed" : null;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetObjRef = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("jsFunctions.registerOnlineStatusHandler", dotNetObjRef);
        }
    }
    
    private void OpenVisits()
    {
        NavigationManager.NavigateTo("/visits");
    }


    private async Task SynAsync()
    {
        await SyncService.SyncAsync();
        StateHasChanged();
    }
    
    [JSInvokable]
    public Task SetOnlineStatus(bool isOnline, bool isWiFi)
    {
        ApplicationContextAccessor.NetworkStatus = isOnline ? NetworkStatus.Online : NetworkStatus.Offline;
        StateHasChanged();
        return Task.CompletedTask;
    }

}