@using Blazored.Toast.Configuration
@using FiscalLabApp.Services
@using Mapster
@using System.Text.Json
@implements IDisposable
@implements IAsyncDisposable
@inherits LayoutComponentBase
@inject IVisitService VisitService
@inject SelectedVisitEvent SelectedVisitEvent

<CascadingValue Value="this">
    <NavMenu/>
    <main class="container" style="background-color: #f5f4f2;">
        <VisitPageSelector Pages="@_pages"/>
        @Body
    </main>
</CascadingValue>

<BlazoredToasts Position="ToastPosition.TopRight" Timeout="5"/>

@code
{
    public string SelectedVisitId { get; set; } = string.Empty;
    public VisitViewModel? SelectedVisit { get; set; }
    private VisitPage[] _pages = Array.Empty<VisitPage>();

    // protected override Task OnInitializedAsync()
    // {
    //     //SelectedVisitEvent.SelectedVisit += HandleSelectedVisit;
    //     SelectedVisit = SelectedVisitEvent.SelectedVisitModel!;
    //     var metadata = SelectedVisit.GetMetadata();
    //     _pages = metadata.Pages.OrderBy(v => v.Id).ToArray();
    //     return Task.CompletedTask;
    // }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (! firstRender) return Task.CompletedTask;
        
        SelectedVisit = SelectedVisitEvent.SelectedVisitModel!;
        var metadata = SelectedVisit.GetMetadata();
        _pages = metadata.Pages.OrderBy(v => v.Id).ToArray();
        StateHasChanged();
        return Task.CompletedTask;
    }


    public Task SetSelectedVisitId(string selectedVisitId)
    {
        // SelectedVisitId = selectedVisitId;
        // _selectedVisit = await VisitService.GetByIdAsync(selectedVisitId);
        // _selectedVisitViewModel = _selectedVisit.Adapt<VisitViewModel>();
        //
        // StateHasChanged();
        //SelectedVisitEvent.SelectedVisit += HandleSelectedVisit;
        return Task.CompletedTask;
    }
    
    private void HandleSelectedVisit(VisitViewModel visit)
    {
        SelectedVisit = visit;
        var metadata = SelectedVisit.GetMetadata();
        _pages = metadata.Pages.OrderBy(v => v.Id).ToArray();
        StateHasChanged();
    }
    
    public Task UpdateVisitAsync()
    {
        var visit = SelectedVisit.Adapt<Visit>();
        Console.WriteLine($"visita atualizada: {JsonSerializer.Serialize(visit)}");
        return VisitService.UpdateAsync(visit);
    }
    
    public void Dispose()
    {
        SelectedVisitEvent.SelectedVisit -= HandleSelectedVisit;
    }

    public ValueTask DisposeAsync()
    {
        SelectedVisitEvent.SelectedVisit -= HandleSelectedVisit;
        return ValueTask.CompletedTask;
    }
}