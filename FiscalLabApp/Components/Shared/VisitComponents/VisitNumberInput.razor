@using System.Globalization
@using FiscalLabApp.Services
@inject SelectedVisitEventNotifier SelectedVisitEventNotifier

<div class="form-floating mb-3">
    <InputText class="form-control" id="@Id" @onblur="OnBlur" @bind-Value="ValueString" readonly="@Readonly" style="font-size: 12px; height: fit-content"/>
  <label for="@Id" style="font-size: 14px;">@Title</label>
</div >

@code {
    
    [Parameter]
    public string Id { get; set; } = string.Empty;
    [Parameter]
    public string Title { get; set; } = string.Empty;
    [Parameter]
    public decimal Value { get; set; }
    [Parameter]
    public EventCallback<decimal> ValueChanged { get; set; }
    [Parameter]
    public EventCallback<decimal> ValueUpdated { get; set; }
    [Parameter]
    public bool Readonly { get; set; }
    
    private string ValueString
    {
        get => Value.ToString("0.##", CultureInfo.InvariantCulture).Replace('.', ',');
        set
        {
            if (decimal.TryParse(value.Replace(',', '.'), NumberStyles.Any, CultureInfo.InvariantCulture, out var result))
            {
                // Apenas atualiza o valor se ele for diferente do atual
                if (Value != result)
                {
                    Value = result;
                    ValueChanged.InvokeAsync(Value);
                    ValueUpdated.InvokeAsync(Value); // Chama ValueUpdated aqui
                }
            }
        }
    }
    
    private async Task UpdateParent(ChangeEventArgs e)
    {
        if (e.Value is null || string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            await ValueChanged.InvokeAsync(0);
            await ValueUpdated.InvokeAsync(0);
            return;
        }
        
        await ValueChanged.InvokeAsync(decimal.Parse(e.Value.ToString()!));
        await ValueUpdated.InvokeAsync(decimal.Parse(e.Value.ToString()!));
    }
    
    private void OnBlur(FocusEventArgs e)
    {
        SelectedVisitEventNotifier.NotifyFill();
    }
}