@page "/associations"
@page "/associations/{AssociationId}"
@using FiscalLabApp.Helpers
@using FiscalLabApp.Extensions
@inject NavigationManager NavigationManager
@inject IAssociationService AssociationService

<h6>Associação</h6>
<EditForm Model="@AssociationViewModel" OnValidSubmit="@SaveOrUpdate">
    <DataAnnotationsValidator/>
    <div class="form-floating mb-3">
        <InputText class="form-control" id="nameInput" @bind-Value="AssociationViewModel.Name"/>
        <label for="nameInput">Nome <strong class="text-danger">*</strong></label>
        <ValidationMessage For="() => AssociationViewModel.Name"/>
    </div >

    <div class="row">
        <div class="col">
            <div class="form-floating mb-3">
                <InputText class="form-control" id="stateInput" @bind-Value="AssociationViewModel.City"/>
                <label for="emailInput">Cidade <strong class="text-danger">*</strong></label>
                <ValidationMessage For="() => AssociationViewModel.City"/>
            </div >
        </div>

        <div class="col">
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="SelectedState" class="form-control" id="cityInput" @bind-Value:after="OnChangeState">
                    @foreach (var state in AddressHelper.StatesFromBrazil)
                    {
                        <option value="@state.Key" selected="@(AssociationViewModel.State.Equals(state.Key))">@state.Value</option>
                    }
                </InputSelect>
                <label for="cityInput">Estado <strong class="text-danger">*</strong></label>
                <ValidationMessage For="() => AssociationViewModel.State"/>
            </div >
        </div>

    </div>

    <div class="form-floating mb-3">
        <InputTextArea class="form-control" id="emailInput" @bind-Value="AssociationViewModel.Emails" rows="@Rows"/>
        <label for="emailInput">Emails <strong class="text-danger">*</strong></label>
        <ValidationMessage For="() => AssociationViewModel.Emails"/>
    </div >

    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-outline-secondary mb-3" @onclick="OnCancel">Cancelar</button>
        <button type="submit" class="btn btn-outline-success mb-3 ms-3">Salvar</button>
        <button type="button" class="btn btn-outline-danger mb-3 ms-3" disabled="@(string.IsNullOrWhiteSpace(AssociationId))">Excluir</button>
    </div>
</EditForm >


@code {

    [Parameter] public string AssociationId { get; set; } = string.Empty;
    [SupplyParameterFromQuery] private string Callback { get; set; } = "/";
    private const string SplitToken = ";";
    
    private int Rows { get; set; }

    public AssociationViewModel AssociationViewModel = new();
    private string SelectedState { get; set; } = string.Empty;
    private Association _selectedAssociation = new();

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(AssociationId))
        {
            _selectedAssociation = await AssociationService.GetAsync(AssociationId);
            AssociationViewModel = _selectedAssociation.AsAssociationViewModel();
            SelectedState = AssociationViewModel.State;
            
            AssociationViewModel.Emails = $"{string.Join($"{SplitToken}{Environment.NewLine}{Environment.NewLine}", _selectedAssociation.Emails.Select(e => e.Address))}";
            if (!AssociationViewModel.Emails.EndsWith(SplitToken))
            {
                AssociationViewModel.Emails += SplitToken;
            }

            Rows = _selectedAssociation.Emails.Count * 2;
        }
    }

    private async Task SaveOrUpdate()
    {
        var emails = AssociationViewModel.Emails
            .SplitByBar(SplitToken)
            .Select(e => new Email { Address = e })
            .ToList();
        
        if (string.IsNullOrWhiteSpace(AssociationId))
        {
            var association = new Association
            {
                Id = Guid.NewGuid().ToString(),
                Name = AssociationViewModel.Name,
                Address = new Address
                {
                    City = AssociationViewModel.City,
                    State = AssociationViewModel.State
                },
                Emails = emails
            };
            await AssociationService.CreateAsync(association);
        }
        else
        {
            _selectedAssociation.Name = AssociationViewModel.Name;
            _selectedAssociation.Address.City = AssociationViewModel.City;
            _selectedAssociation.Address.State = AssociationViewModel.State;
            _selectedAssociation.Emails = emails;
            await AssociationService.UpdateAsync(_selectedAssociation);
        }

        NavigationManager.NavigateTo(Callback);
    }

    private void OnChangeState()
    {
        AssociationViewModel.State = SelectedState;
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo(Callback);
    }

}