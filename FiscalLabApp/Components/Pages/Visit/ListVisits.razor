@page "/"
@page "/visits"
@using FiscalLabApp.Services
@using Mapster
@using FiscalLabApp.Helpers
@using FiscalLabApp.Enums


@inject IVisitService VisitService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IToastService ToastService
@inject ApplicationContextAccessor ApplicationContextAccessor
@inject IApiService ApiService
@inject SyncService SyncService
@inject SyncEventNotifier SyncEventNotifier

<PageTitle>Visitas</PageTitle>

<div class="mb-5">
    <div class="d-flex justify-content-end fixed-bottom mb-4 me-3">
        <button class="btn rounded-pill btn-lg fw-bolder shadow ps-3 pe-3" @onclick="NewVisit" style="background-color: #467b56; color: #ffffff;">
            Nova Visita
        </button>
    </div>
    @foreach (var visit in _visits.Where(v => v.Status != VisitStatus.Cancelled))
    {
        <div class="card mb-3 rounded shadow p-2"
             style="@GetBorderStyle(visit)">

            <div class="d-flex flex-column justify-content-start">
                <div class="d-flex flex-row justify-content-end mb-2">
                    <span class="badge " style="@GetBadgeStyle(visit.GetMetadata().PendingItems)">
                        @($"Pendências: {visit.GetMetadata().PendingItems}")
                    </span>
                </div>

                <small class="text-muted fw-bold"> @($"{visit.BasicInformation.Plant?.Name} ({visit.BasicInformation.Plant?.Address.City} - {visit.BasicInformation.Plant?.Address.State})")</small>
                <small class="text-muted fw-bolder"> @($"{visit.BasicInformation.Association?.Name} ({visit.BasicInformation.Association?.Address.City} - {visit.BasicInformation.Association?.Address.State})")</small>

                <div class="d-flex flex-row justify-content-start mb-1">
                    <span class="badge " style="background-color: #f5f4f2; color: #312d2a">
                        <small class="text-muted fw-semibold">@($"Criado em: {visit.CreatedAt.ToLocalTime():dd/MM/yyyy HH:mm:ss}")</small>
                    </span>
                </div>

                <div class="d-flex flex-row justify-content-start mb-1">
                    <span class="badge " style="background-color: #f5f4f2; color: #312d2a">
                        @if (visit.SyncedAt.HasValue)
                        {
                            <small class="text-muted fw-semibold">@($"Sincronizado em: {visit.SyncedAt.Value.ToLocalTime():dd/MM/yyyy HH:mm:ss}")</small>
                        }
                        else
                        {
                            <small class="text-muted fw-semibold">@("Sincronizado em: - ")</small>
                        }
                    </span>
                </div>


                @if (visit.NotifiedByEmailAt is not null)
                {
                    <div class="d-flex flex-row justify-content-start mb-2">
                        <span class="badge " style="background-color: #f5f4f2; color: #312d2a">
                            <small class="text-muted fw-semibold">@($"Enviado por e-mail em: {visit.NotifiedByEmailAt.Value.ToLocalTime():dd/MM/yyyy HH:mm:ss}")</small>
                        </span>
                    </div>
                }
                else
                {
                    <div class="form-check">
                        <InputCheckbox class="form-check-input" type="checkbox" @bind-Value="visit.NotifyByEmail" id="flexCheckDefault" @oninput="() => MarkAsNotifyByEmail(visit)"style="width: 16px; height: 16px;"/>
                        <small class="text-muted fw-semibold" style="font-size: 0.700em;">Enviar por e-mail</small>
                    </div>
                }

            </div>

            <div class="mt-2 d-flex flex-row p-0">
                <button class="btn card" type="button" @onclick="() => EditVisit(visit)">
                    <EditIcon/>
                </button>
                <button class="btn card ms-2" type="button" @onclick="() => DeleteVisitAsync(visit)">
                    <DeleteIcon/>
                </button>
                <button class="btn card ms-2" type="button" @onclick="() => GetPdf(visit.Id)">
                    <PdfIcon/>
                </button>
            </div>

        </div>
    }
</div>


@code {
    private VisitViewModel[] _visits = [];
    private string PdfContent { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await SyncVisits();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            SyncEventNotifier.SyncEvent += async (sender, args) => { await SyncEventHandler(sender, args); };
        }
    }

    private void NewVisit()
    {
        NavigationManager.NavigateTo("/new-visit");
    }

    private void EditVisit(VisitViewModel visit)
    {
        NavigationManager.NavigateTo($"/visits/{visit.Id}/main");
    }

    private async Task DeleteVisitAsync(VisitViewModel visit)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Remover visita ?");
        if (!confirmed) return;

        await VisitService.DeleteAsync(visit.Id);
        await JsRuntime.InvokeVoidAsync("removeFocusFromAllElements");
        await SyncVisits();
    }


    private async Task MarkAsNotifyByEmail(VisitViewModel visitViewModel)
    {
        var visit = await VisitService.GetByIdAsync(visitViewModel.Id);
        visit.NotifyByEmail = visitViewModel.NotifyByEmail;
        visit.FinishedAt = visitViewModel.NotifyByEmail ? DateTime.UtcNow : null;
        await VisitService.UpdateAsync(visit);
    }

    private async Task GetPdf(string visitId)
    {
        if (!ApplicationContextAccessor.IsOnline())
        {
            ToastService.ShowError(MessageHelper.NoInternetConnection);
            return;
        }
        
        var visit = await VisitService.GetByIdAsync(visitId);
        if (visit.SyncedAt is null)
        {
            ToastService.ShowError(MessageHelper.UnSynchronizedData);
            return;
        }

        var bytes = await ApiService.GenerateVisitPdf(visit.Id);
        PdfContent = Convert.ToBase64String(bytes);

        await JsRuntime.InvokeVoidAsync("savePdf", PdfContent, "visita.pdf");
    }

    [JSInvokable]
    public Task SyncCompleted(string message)
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    private static string GetBorderStyle(VisitViewModel viewModel)
    {
        return viewModel.NotifiedByEmailAt is null
            ? "border-left: 0.750rem solid #b9b0ab;;border-right: 0;border-top: 0;border-bottom: 0; background-color: #ffffff;"
            : "border-left: 0.750rem solid #467b56;border-right: 0;border-top: 0;border-bottom: 0; background-color: #ffffff;";
    }

    private static string GetBadgeStyle(int totalPendingItems)
    {
        return totalPendingItems == 0 ? "background-color: #467b56;" : "background-color: #c74634;";
    }

    private async Task SyncEventHandler(object? sender, EventArgs e)
    {
        await SyncVisits();
        StateHasChanged();
    }

    private async Task SyncVisits()
    {
        var visits = await VisitService.GetAllAsync();
        _visits = visits.OrderByDescending(x => x.CreatedAt).Adapt<VisitViewModel[]>();
    }

}