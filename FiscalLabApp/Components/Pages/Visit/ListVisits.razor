@page "/"
@page "/visits"
@using FiscalLabApp.Services
@using Mapster
@using FiscalLabApp.Helpers


@inject IVisitService VisitService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IToastService ToastService
@inject ApplicationContextAccessor ApplicationContextAccessor
@inject SelectedVisitEvent SelectedVisitEvent
@inject IApiService ApiService
@inject SyncService SyncService

<PageTitle>Visitas</PageTitle>
<div class="mb-5">
    <div class="d-flex justify-content-end fixed-bottom mb-2 me-3">
        <button class="btn rounded-pill btn-lg fw-bolder shadow" @onclick="NewVisit" style="background-color: #57504a; color: #ffffff;">
            Nova Visita
        </button>
    </div>
    @foreach (var visit in _visits)
    {
        <div class="card mb-3 rounded ps-2 pe-2 shadow"
             style="border-left: 0.750rem solid indianred;border-right: 0;border-top: 0;border-bottom: 0; background-color: #ffffff;">

            <div class="col card-body">
                <div class="row">
                    <div class="col text-truncate">
                        <div class="row">
                            <div class="col text-truncate fw-semibold text-body-tertiary" style="font-size: 0.875em;">
                                @($"{visit.BasicInformation.Plant?.Name} ({visit.BasicInformation.Plant?.Address.City} - {visit.BasicInformation.Plant?.Address.State})")
                                <span class="position-absolute end-0 translate-middle badge rounded-pill" style="background-color: indianred;">
                                    @($"{visit.GetMetadata().PendingItems}")
                                    <span class="visually-hidden">unread messages</span>
                                </span>
                            </div>

                            <div class="text-truncate fw-semibold text-muted" style="font-size: 0.750em;">@($"{visit.BasicInformation.Association?.Name} ({visit.BasicInformation.Association?.Address.City} - {visit.BasicInformation.Association?.Address.State})")</div>
                            <small class="text-muted fw-semibold" style="font-size: 0.700em;">@($"Criado em: {visit.CreatedAt.ToLocalTime():dd/MM/yyyy HH:mm:ss}")</small>
                            @if (visit.SyncedAt.HasValue)
                            {
                                <small class="text-muted fw-semibold" style="font-size: 0.700em;">@($"Sincronizado em: {visit.SyncedAt.Value.ToLocalTime():dd/MM/yyyy HH:mm:ss}")</small>
                            }
                            else
                            {
                                <small class="text-muted fw-semibold" style="font-size: 0.700em;">@("Sincronizado em: -")</small>
                            }
                        </div>
                    </div>
                </div>

                <div class="d-flex flex-row p-0">
                    <div class="form-switch">
                        <InputCheckbox class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" @bind-Value="visit.NotifyByEmail" @oninput="() => OnFinishedClicked(visit)"/>
                        <small class="form-check-label text-muted fw-semibold" for="flexSwitchCheckChecked">Marcar para Envio</small>
                    </div >
                </div>
                
                <div class="mt-2 d-flex flex-row p-0">
                    <button class="btn card" type="button" @onclick="() => EditVisit(visit)">
                        <EditIcon/>
                    </button>
                    <button class="btn card ms-2" type="button" @onclick="() => DeleteVisitAsync(visit.Id)">
                        <DeleteIcon/>
                    </button>
                    <button class="btn card ms-2" type="button" @onclick="() => GetPdf(visit.Id)">
                        <PdfIcon/>
                    </button>
                </div>
            </div>

        </div>
    }
</div>


@code {
    private VisitViewModel[] _visits = [];

    protected override async Task OnInitializedAsync()
    {
        var visits = await VisitService.GetAllAsync();
        _visits = visits.OrderByDescending(x => x.CreatedAt).Adapt<VisitViewModel[]>();

        // if (await SyncService.NeedSync())
        // {
        //     ToastService.ShowWarning(MessageHelper.UnSynchronizedData);
        // }
    }

    private void NewVisit()
    {
        NavigationManager.NavigateTo("/new-visit");
    }

    private void EditVisit(VisitViewModel visit)
    {
        SelectedVisitEvent.NotifySelectedVisit(visit);
        SelectedVisitEvent.SelectedVisitModel = visit;
        NavigationManager.NavigateTo($"/visits/{visit.Id}/main");
    }

    private async Task DeleteVisitAsync(string visitId)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Remover visita ?");
        if (!confirmed) return;

        await VisitService.DeleteAsync(visitId);
        NavigationManager.Refresh(true);
    }
    
    private async Task OnFinishedClicked(VisitViewModel visitViewModel)
    {
        var visit = await VisitService.GetByIdAsync(visitViewModel.Id);
        
        visit.NotifyByEmail = visitViewModel.NotifyByEmail;
        visit.FinishedAt = visitViewModel.NotifyByEmail ? DateTime.UtcNow : null;
        await VisitService.UpdateAsync(visit);
    }

    private async Task GetPdf(string visitId)
    {
        var visit = await VisitService.GetByIdAsync(visitId);
        if (visit.SyncedAt is null)
        {
            ToastService.ShowError("Visita ainda nao foi sincronizada.");
            return;
        }

        var pdf = await ApiService.GenerateVisitPdf(visit.Id);
        await JsRuntime.InvokeVoidAsync("downloadPdf", pdf, $"visita{visit.Id}.pdf");
    }

    [JSInvokable]
    public Task SyncCompleted(string message)
    {
        Console.WriteLine($"sync completed: {message}");
        StateHasChanged();
        return Task.CompletedTask;
    }

}