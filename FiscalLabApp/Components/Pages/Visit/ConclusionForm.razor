@page "/visits/{visitId}/conclusion"
@implements IDisposable
@implements IAsyncDisposable
@using FiscalLabApp.Extensions
@layout EditVisitLayout
@inject IMenuService MenuService
@inject NavigationManager NavigationManager

<VisitDataSeparator Title="Conclusao">
    <div class="row">
        <div class="col">
            <VisitTextInput Title="Desempenho do fiscal" Menu="@_options.GetMenu(MenuType.ConclusionInspectorPerformance)" Id="conclusionInspectorPerformance" @bind-value="Conclusion.InspectorPerformance"/>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <VisitTextInput Title="Desempenho Laboratório" Menu="@_options.GetMenu(MenuType.ConclusionLaboratoryPerformance)" Id="conclusionLaboratoryReceptivity" @bind-value="Conclusion.LaboratoryReceptivity"/>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <VisitTextInput Title="Pendências" Menu="@_options.GetMenu(MenuType.ConclusionPendencies)" Id="conclusionPendencies" @bind-Value="Conclusion.Pendencies"/>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <VisitTextInput Title="Observações sobre a visita" Menu="@_options.GetMenu(MenuType.ConclusionObservations)" Id="conclusionObservations" @bind-Value="Conclusion.Observations"/>
        </div>
    </div>
    <div class="d-grid">
      <button class="btn btn-primary" type="button" @onclick="AddImage">Imagens</button>
    </div>
</VisitDataSeparator>


@code {

    [CascadingParameter] public EditVisitLayout Layout { get; set; } = new();
    [Parameter] public string? VisitId { get; set; }
    private ConclusionViewModel Conclusion { get; set; } = new();
    private Menu[] _options = Array.Empty<Menu>();

    protected override async Task OnInitializedAsync()
    {
        _options = await MenuService.GetMenuOptions(PageType.Conclusion);
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (VisitId is null) return;
        Conclusion = (await Layout.SyncVisit(VisitId)).Conclusion;
    }
    
    private void AddImage()
    {
        NavigationManager.NavigateTo("/visits/images");
    }
    
    public void Dispose()
    {
        UpdateVisit();
    }

    public async ValueTask DisposeAsync()
    {
        await UpdateVisit();
    }

    private async Task UpdateVisit()
    {
        await Layout.UpdateVisitAsync();
    }

}