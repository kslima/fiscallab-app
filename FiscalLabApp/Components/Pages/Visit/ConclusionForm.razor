@page "/visits/{VisitId}/Conclusion"
@implements IDisposable
@implements IAsyncDisposable
@using FiscalLabApp.Extensions
@using Mapster

@layout EditVisitLayout
@inject IMenuService MenuService
@inject IVisitService VisitService

<VisitDataSeparator Title="Conclusao">
    <div class="row">
        <div class="col">
            <VisitTextInput Title="Desempenho do fiscal" Menu="@_options.GetMenu(MenuType.ConclusionInspectorPerformance)" Id="conclusionInspectorPerformance" @bind-value="SelectedConclusion.InspectorPerformance"/>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <VisitTextInput Title="Desempenho Laboratório" Menu="@_options.GetMenu(MenuType.ConclusionLaboratoryPerformance)" Id="conclusionLaboratoryReceptivity" @bind-value="SelectedConclusion.LaboratoryReceptivity"/>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <VisitTextInput Title="Pendências" Menu="@_options.GetMenu(MenuType.ConclusionPendencies)" Id="conclusionPendencies" @bind-Value="SelectedConclusion.Pendencies"/>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <VisitTextInput Title="Observações sobre a visita" Menu="@_options.GetMenu(MenuType.ConclusionObservations)" Id="conclusionObservations" @bind-Value="SelectedConclusion.Observations"/>
        </div>
    </div>
    
</VisitDataSeparator>


@code {

    [CascadingParameter] public EditVisitLayout Layout { get; set; } = new();

    [Parameter] public string VisitId { get; set; } = string.Empty;

    private Visit SelectedVisit { get; set; } = new();
    private ConclusionViewModel SelectedConclusion { get; set; } = new();
    private Menu[] _options = Array.Empty<Menu>();

    protected override async Task OnInitializedAsync()
    {
        _options = await MenuService.GetMenuOptions(PageType.Conclusion);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(VisitId))
        {
            SelectedVisit = await VisitService.GetByIdAsync(VisitId);
            SelectedConclusion = SelectedVisit.Conclusion.Adapt<ConclusionViewModel>();
            await Layout.SetSelectedVisitId(VisitId);
        }
    }

    public void Dispose()
    { 
        UpdateVisit();
    }
    
    public async ValueTask DisposeAsync()
    {
        await UpdateVisit();
    }

    private async Task UpdateVisit()
    {
        SelectedVisit.Conclusion = SelectedConclusion.Adapt<Models.Conclusion>();
        await VisitService.UpdateAsync(SelectedVisit);
    }

}