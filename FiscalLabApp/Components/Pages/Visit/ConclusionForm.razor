@page "/visits/{visitId}/conclusion"
@implements IDisposable
@implements IAsyncDisposable
@using FiscalLabApp.Extensions
@using FiscalLabApp.Helpers
@using FiscalLabApp.Services
@layout EditVisitLayout
@inject IMenuService MenuService
@inject NavigationManager NavigationManager
@inject SelectedPageEventNotifier SelectedPageEventNotifier
@inject IToastService ToastService

<VisitDataSeparator Title="Conclusao">
    <div class="row">
        <div class="col">
            <VisitTextInput Title="Desempenho do fiscal" Menu="@_options.GetMenu(MenuType.ConclusionInspectorPerformance)" Id="conclusionInspectorPerformance" @bind-value="Conclusion.InspectorPerformance"/>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <VisitTextInput Title="Desempenho Laboratório" Menu="@_options.GetMenu(MenuType.ConclusionLaboratoryPerformance)" Id="conclusionLaboratoryReceptivity" @bind-value="Conclusion.LaboratoryReceptivity"/>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <VisitTextInput Title="Pendências" Menu="@_options.GetMenu(MenuType.ConclusionPendencies)" Id="conclusionPendencies" @bind-Value="Conclusion.Pendencies"/>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <VisitTextInput Title="Observações sobre a visita" Menu="@_options.GetMenu(MenuType.ConclusionObservations)" Id="conclusionObservations" @bind-Value="Conclusion.Observations"/>
        </div>
    </div>
    <div class="d-grid">
        <button class="btn btn-primary" type="button" @onclick="OpenImages">@($"Imagens({Images.Count})")</button>
    </div>

    <div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay; overflow-y: auto;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="optionsModalLabel">Imagens</h5>
                    <button type="button" class="btn-close" @onclick="CloseImages"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-2">
                        <InputFile OnChange="@OnFileSelection" multiple></InputFile>
                    </div>

                    @if (Images.Any())
                    {
                        @foreach (var img in Images)
                        {
                            <div class="flex-row border border-light-subtle p-2 mb-2 my-2">
                                <img src="@img.Url" alt="..." class="rounded mb-2" style="object-fit: contain;max-width: 100%;max-height: 100%;width: auto;height: auto">
                                <div class="form-floating input-group mb-2">
                                    <InputTextArea type="text" class="form-control" id="@img.Name" @bind-Value="@img.Description"/>
                                    <label>Descrição</label>
                                </div>
                                <div class="d-flex justify-content-end">
                                    <button type="button" class="btn btn-danger w-100" @onclick="() => RemoveImage(img.Name)">Remover</button>
                                </div>

                            </div>
                        }
                
                        <button type="submit" class="btn btn-success mb-2 w-100" @onclick="SaveImages" disabled="@(!Images.Any())">Salvar</button>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (_showBackdrop)
    {
        <div class="modal-backdrop fade show"></div>
    }

</VisitDataSeparator>


@code {

    [CascadingParameter] public EditVisitLayout Layout { get; set; } = new();
    [Parameter] public string? VisitId { get; set; }
    private ConclusionViewModel Conclusion { get; set; } = new();
    private Menu[] _options = Array.Empty<Menu>();

    private List<ImageViewModel> Images { get; set; } = [];
    private const int MaxAllowedSize = 10 * 1024 * 1024;

    private string _modalDisplay = "none;";
    private string _modalClass = string.Empty;
    private bool _showBackdrop = false;

    private void OpenImages()
    {
        _modalDisplay = "block";
        _modalClass = "show";
        _showBackdrop = true;
    }

    private void CloseImages()
    {
        _modalDisplay = "none";
        _modalClass = string.Empty;
        _showBackdrop = false;
    }

    protected override async Task OnInitializedAsync()
    {
        _options = await MenuService.GetMenuOptions(PageType.Conclusion);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (VisitId is null) return;
        var visit = await Layout.SyncVisit(VisitId);
        Conclusion = visit.Conclusion;
        Images = visit.Images;
        SelectedPageEventNotifier.Notify(PageHelper.ConclusionPageName);
    }

    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        foreach (var imgFile in e.GetMultipleFiles(20))
        {
            var resizedImg = await imgFile.RequestImageFileAsync(imgFile.ContentType, 600, int.MaxValue);

            var buffers = new byte[resizedImg.Size];
            var amount = await resizedImg
                .OpenReadStream(MaxAllowedSize)
                .ReadAsync(buffers);

            if (amount <= 0) return;
            var imageType = resizedImg.ContentType;
            var imgUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";
            var imgName = resizedImg.Name;

            Images.Add(new ImageViewModel { Name = imgName, Url = imgUrl });
        }
    }

    private void SaveImages()
    {
        if (Layout.SelectedVisit is null) return;
        Layout.SelectedVisit.Images = Images;
        CloseImages();
        StateHasChanged();
    }

    private void RemoveImage(string name)
    {
        Images = Images.Where(i => !i.Name.Equals(name)).ToList();

        if (!Images.Any())
        {
            SaveImages();
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        UpdateVisit();
    }

    public async ValueTask DisposeAsync()
    {
        await UpdateVisit();
    }

    private async Task UpdateVisit()
    {
        await Layout.UpdateVisitAsync();
    }

}