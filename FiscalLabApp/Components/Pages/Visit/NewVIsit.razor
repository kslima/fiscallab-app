@page "/new-visit"

@inject IVisitService VisitService
@inject IMenuService MenuService
@inject IPlantRepository PlantRepository
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col">
        <div class="form-floating mb-3">
            <InputSelect @bind-Value="_plantId" class="form-control" id="plantInput">
                <option value="" selected>Selecione uma usina..</option>
                @foreach (var plant in _plants)
                {
                    <option value="@plant.Id">@plant.Name</option>
                }
            </InputSelect>
        </div >

    </div>
</div>

<div class="row">
    <div class="col">
        <div class="form-floating mb-3">
            <input class="form-control" id="createdAtDateInput" type="date" @bind-value="_date"/>
        </div >

    </div>
    <div class="col">
        <div class="form-floating mb-3">
            <input class="form-control" id="createdAtTimeInput" type="time" @bind-value="_time"/>
            <label for="createdAtTimeInput">Hora</label>
        </div >
    </div>
</div>

<div class="d-grid gap-2">
    <button type="button" class="btn btn-success mb-3" @onclick="CreateNewVisit">Criar</button>
</div>

@code {

    private string _plantId = string.Empty;
    private DateOnly _date = DateOnly.FromDateTime(DateTime.Now);
    private TimeOnly _time = TimeOnly.FromDateTime(DateTime.Now);
    private MenuOption[] _options = Array.Empty<MenuOption>();
    private List<PlantModel> _plants = new();

    protected override async Task OnInitializedAsync()
    {
        _options = await MenuService.GetOptions(PageType.Main);
        _plants = await PlantRepository.GetAllAsync();
    }

    private MenuOption? GetOption(MenuType menuType)
    {
        var options = _options.SingleOrDefault(o => o.Menu.Equals(menuType.ToString()));

        return options;
    }

    private async Task CreateNewVisit()
    {
        var visit = new Visit
        {
            Plant = _plants.Single(p => p.Id.Equals(_plantId)),
            VisitDate = _date,
            VisitTime = _time,
            CreatedAt = DateTime.UtcNow
        };
        visit = await VisitService.CreateAsync(visit);
        NavigationManager.NavigateTo("/visits");
    }

}