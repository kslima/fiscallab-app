@page "/new-visit"
@using FiscalLabApp.Extensions
@using Mapster

@inject IVisitService VisitService
@inject NavigationManager NavigationManager

<EditForm Model="@BasicInformationViewModel" OnValidSubmit="@CreateAsync">
    <DataAnnotationsValidator/>
    <div class="row">
        <div class="col">
            <PlantSelectInput PlantChanged="OnPlantChanged" CallbackRoute="/new-visit"/>
            <ValidationMessage For="() => BasicInformationViewModel.Plant"/>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <AssociationSelectInput AssociationChanged="OnAssociationChanged" CallbackRoute="/new-visit"/>
            <ValidationMessage For="() => BasicInformationViewModel.Association"/>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="form-floating mb-3">
                <InputDate class="form-control" id="createdAtDateInput" Type="InputDateType.Date" @bind-Value="BasicInformationViewModel.VisitDate"/>
                <label for="createdAtTimeInput">Data</label>
                <ValidationMessage For="() => BasicInformationViewModel.VisitDate"/>
            </div >

        </div>
        <div class="col">
            <div class="form-floating mb-3">
                <InputDate class="form-control" id="createdAtTimeInput" Type="InputDateType.Time" @bind-Value="BasicInformationViewModel.VisitTime"/>
                <label for="createdAtTimeInput">Hora</label>
                <ValidationMessage For="() => BasicInformationViewModel.VisitTime"/>
            </div >
        </div>
    </div>

    <div class="d-flex justify-content-end">
        <button class="btn btn-outline-secondary mb-3" @onclick="OnCancel">Cancelar</button>
        <button type="submit" class="btn btn-outline-success mb-3 ms-3">Salvar</button>
    </div>
</EditForm>

@code {
    
    public readonly BasicInformationViewModel BasicInformationViewModel = new();
    
    private async Task CreateAsync()
    {
        var visit = new Visit
        {
            Id = Guid.NewGuid().ToString(),
            BasicInformation = BasicInformationViewModel.Adapt<BasicInformation>()
        };

        visit.BasicInformation.CreatedAt = DateTime.UtcNow;
        await VisitService.CreateAsync(visit);

        NavigationManager.NavigateTo("/visits");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/visits");
    }

    private Task OnPlantChanged(Plant plant)
    {
        BasicInformationViewModel.Plant = plant;
        return Task.CompletedTask;
    }

    private Task OnAssociationChanged(Association association)
    {
        BasicInformationViewModel.Association = association;
        return Task.CompletedTask;
    }
}