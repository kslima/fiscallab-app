@page "/visits/{VisitId}/AnalyticalBalance"
@implements IDisposable
@implements IAsyncDisposable
@using FiscalLabApp.Extensions
@using Mapster
@layout EditVisitLayout

@inject IMenuService MenuService
@inject IVisitService VisitService

<VisitDataSeparator Title="Balança Analítica">
    <div class="row">
        <div class="col">
            <VisitTextInput Title="Peso Homogenio Apos" Menu="@_options.GetMenu(MenuType.AnalyticalBalanceHomogeneousWeight)" Id="homogeneousWeight" @bind-value="SelectedAnalyticalBalance.HomogeneousWeight"/>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <VisitTextInput Title="Peso Amostra Final" Menu="@_options.GetMenu(MenuType.AnalyticalBalanceFinalWeight)" Id="finalWeight" @bind-value="SelectedAnalyticalBalance.FinalWeight"/>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <VisitTextInput Title="Balança Aferida" Menu="@_options.GetMenu(MenuType.AnalyticalBalanceCalibratedBalance)" Id="calibratedBalance" @bind-value="SelectedAnalyticalBalance.CalibratedBalance"/>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <VisitTextInput Title="Balança Nivelada" Menu="@_options.GetMenu(MenuType.AnalyticalBalanceLeveledBalance)" Id="leveledBalance" @bind-value="SelectedAnalyticalBalance.LeveledBalance"/>
        </div>
    </div>
    
    <div class="row">
            <div class="col">
                <VisitTextInput Title="Balança Com Certificado de Calibragem" Menu="@_options.GetMenu(MenuType.AnalyticalBalanceCalibrationCertificateBalance)" Id="calibrationCertificateBalance" @bind-value="SelectedAnalyticalBalance.CalibrationCertificateBalance"/>
            </div>
        </div>
    
    <div class="row">
            <div class="col">
                <VisitTextInput Title="Observações 5" Menu="@_options.GetMenu(MenuType.AnalyticalBalanceObservations5)" Id="observations5" @bind-value="SelectedAnalyticalBalance.Observations5"/>
            </div>
        </div>
</VisitDataSeparator>


<VisitDataSeparator Title="Temperatura Ambiente">
    <div class="row">
        <div class="col">
            <VisitTextInput Title="Média temperatura ambiente(20ºC±5)" Menu="@_options.GetMenu(MenuType.AnalyticalBalanceAverageAmbientTemperature)" Id="averageAmbientTemperature" @bind-value="SelectedAnalyticalBalance.AverageAmbientTemperature"/>
        </div>
    </div>
    
    <div class="row">
        <div class="col">
            <VisitTextInput Title="Observações 6" Menu="@_options.GetMenu(MenuType.AnalyticalBalanceObservations6)" Id="observations6" @bind-value="SelectedAnalyticalBalance.Observations6"/>
        </div>
    </div>
</VisitDataSeparator>

@code {

    [CascadingParameter]
    public EditVisitLayout Layout { get; set; } = new();

    private Menu[] _options = Array.Empty<Menu>();

    [Parameter] 
    public string VisitId { get; set; } = string.Empty;

    private Visit SelectedVisit { get; set; } = new();
    public AnalyticalBalanceViewModel SelectedAnalyticalBalance { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        _options = await MenuService.GetMenuOptions(PageType.AnalyticalBalance);
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(VisitId))
        {
            SelectedVisit = await VisitService.GetByIdAsync(VisitId);
            SelectedAnalyticalBalance = SelectedVisit.AnalyticalBalance.Adapt<AnalyticalBalanceViewModel>();
            await Layout.SetSelectedVisitId(VisitId);
        }
    }

    public void Dispose()
    { 
        UpdateVisit();
    }
    
    public async ValueTask DisposeAsync()
    {
        await UpdateVisit();
    }

    private async Task UpdateVisit()
    {
        SelectedVisit.AnalyticalBalance = SelectedAnalyticalBalance.Adapt<AnalyticalBalance>();
        await VisitService.UpdateAsync(SelectedVisit);
    }
}