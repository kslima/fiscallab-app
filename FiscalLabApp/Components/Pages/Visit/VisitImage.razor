@page "/visits/{VisitId}/images"
@using Image = FiscalLabApp.Models.Image
@using Mapster
@inject IToastService ToastService
@inject IVisitService VisitService
@inject NavigationManager NavigationManager

<h4>Imagens</h4>
<div>
    <InputFile OnChange="@OnFileSelection" multiple></InputFile>
</div>

@if (Images.Any())
{
    <div class="mt-2">
        @foreach (var img in Images)
        {
            <div class="bg-light border rounded p-2 mb-2">
                <div class="row position-relative">
                    <button type="button" class="btn-close position-absolute top-0 end-0 me-2" aria-label="Close" @onclick="() => RemoveImage(img.Name)"></button>
                </div>
                <div class="row">
                    <img src="@img.Url" alt="..." class="rounded" style="object-fit: contain;max-width: 100%;max-height: 100%;width: auto;height: auto">
                    <div class="row">
                        <div class="col">
                            <div class="form-floating input-group mt-2">
                                <InputTextArea type="text" class="form-control" id="@img.Name" @bind-Value="@img.Description"/>
                                <label>Descrição</label>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        }
    </div>

    <button type="submit" class="btn btn-outline-success mb-3" @onclick="SaveImages" disabled="@(!Images.Any())">Salvar</button>
}

@code {

    private List<ImageViewModel> Images { get; set; } = [];
    [Parameter] public string VisitId { get; set; } = string.Empty;
    private Visit SelectedVisit { get; set; } = new();
    private const int MaxAllowedSize = 10 * 1024 * 1024;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(VisitId))
        {
            SelectedVisit = await VisitService.GetByIdAsync(VisitId);
            Images = SelectedVisit.Images.Adapt<List<ImageViewModel>>();
        }
    }

    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        Images.Clear();
        foreach (var imgFile in e.GetMultipleFiles(20))
        {
            var resizedImg = await imgFile.RequestImageFileAsync(imgFile.ContentType, 600, int.MaxValue);

            var buffers = new byte[resizedImg.Size];
            var amount = await resizedImg
                .OpenReadStream(MaxAllowedSize)
                .ReadAsync(buffers);

            if (amount <= 0) return;
            var imageType = resizedImg.ContentType;
            var imgUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";
            var imgName = resizedImg.Name;

            Images.Add(new ImageViewModel { Name = imgName, Url = imgUrl });
        }
    }

    private async Task SaveImages()
    {
        if (!Images.Any()) return;
        SelectedVisit.Images = Images.Adapt<List<Image>>();
        await VisitService.UpdateAsync(SelectedVisit);
        
        NavigationManager.NavigateTo("visits");
        ToastService.ShowSuccess("Imagens adicionadas com sucesso...");
    }

    private async Task RemoveImage(string name)
    {
        Images = Images.Where(i => !i.Name.Equals(name)).ToList();

        if (!Images.Any())
        {
            await SaveImages();
        }
    }

}