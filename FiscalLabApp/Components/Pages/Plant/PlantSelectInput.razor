@inject IPlantService PlantService
@inject NavigationManager NavigationManager

<div class="form-floating input-group mb-3">
    <InputSelect @bind-Value="_selectedPlantId" class="form-control" id="plantInput" @bind-Value:after="OnChangePlant">
        <option value="" selected hidden>Selecione uma usina..</option>
        @foreach (var plant in Plants)
        {
            <option value="@plant.Id" selected="@(CurrentPlant?.Id.Equals(plant.Id))">@($"{plant.Name} ({plant.Address.City} - {plant.Address.State})")</option>
        }
    </InputSelect>
    <label for="plantInput">Usina <strong class="text-danger">*</strong></label>
    <button class="btn btn-outline-secondary" type="button" @onclick="AddPlant">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"/>
            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"/>
        </svg>
    </button>
    <button class="btn btn-outline-secondary" type="button" @onclick="EditPlant">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
            <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"></path>
            <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z"></path>
        </svg>
    </button>
</div>

@code {

    private string _selectedPlantId = string.Empty;
    private Plant[] Plants { get; set; } = [];
    [Parameter] public string CallbackRoute { get; set; } = "/";
    [Parameter] public Plant? CurrentPlant { get; set; }

    [Parameter] public EventCallback<Plant> PlantChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Plants = await PlantService.GetAllAsync();
    }

    private void EditPlant()
    {
        NavigationManager.NavigateTo($"/plants/{_selectedPlantId}?Callback={CallbackRoute}");
    }

    private void AddPlant()
    {
        NavigationManager.NavigateTo($"/plants?Callback={CallbackRoute}");
    }

    private Task OnChangePlant()
    {
        var selectedPlant = Plants.Single(p => p.Id.Equals(_selectedPlantId));
        return PlantChanged.InvokeAsync(selectedPlant);
    }

}