@page "/plant/{VisitId}"
@page "/plant/{VisitId}/{PlantId}"

@inject NavigationManager NavigationManager
@inject IPlantRepository PlantRepository

<EditForm Model="@PlantModel" OnValidSubmit="@SaveOrUpdatePlant">
    <DataAnnotationsValidator/>
    <div class="form-floating mb-3">
        <InputText class="form-control" id="nameInput" @bind-Value="PlantModel.Name"/>
        <label for="nameInput">Nome <strong class="text-danger">*</strong></label>
        <ValidationMessage For="() => PlantModel.Name"/>
    </div >

    <div class="row">
        <div class="col">
            <div class="form-floating mb-3">
                <InputText class="form-control" id="stateInput" @bind-Value="PlantModel.City"/>
                <label for="emailInput">Cidade <strong class="text-danger">*</strong></label>
                <ValidationMessage For="() => PlantModel.City"/>
            </div >
        </div>

        <div class="col">
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="SelectedState" class="form-control" id="cityInput" @bind-Value:after="OnChangeState">
                    @foreach (var state in StatesFromBrazil)
                    {
                        <option value="@state.Key" selected="@(PlantModel.State.Equals(state.Key))">@state.Value</option>
                    }
                </InputSelect>
                <label for="cityInput">Estado <strong class="text-danger">*</strong></label>
                <ValidationMessage For="() => PlantModel.State"/>
            </div >
        </div>

    </div>

    <div class="form-floating mb-3">
        <InputTextArea class="form-control" id="emailInput" @bind-Value="PlantModel.Emails"/>
        <label for="emailInput">Emails <strong class="text-danger">*</strong></label>
        <ValidationMessage For="() => PlantModel.Emails"/>
    </div >

    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-outline-secondary mb-3 me-2" @onclick="OnCancel">Cancelar</button>
        <button type="submit" class="btn btn-outline-success mb-3 me-2">Salvar</button>
        <button type="button" class="btn btn-outline-danger mb-3" disabled="@(string.IsNullOrWhiteSpace(PlantId))">Excluir</button>
    </div>
</EditForm >


@code {

    private static readonly IReadOnlyDictionary<string, string> StatesFromBrazil = new Dictionary<string, string>
    {
        { "AC", "Acre" },
        { "AL", "Alagoas" },
        { "AP", "Amapá" },
        { "AM", "Amazonas" },
        { "BA", "Bahia" },
        { "CE", "Ceara" },
        { "DF", "Distrito Federal" },
        { "ES", "Espirito Santo" },
        { "GO", "Goiás" },
        { "MA", "Maranhão" },
        { "MT", "Mato Grosso" },
        { "MS", "Mato Grosso do Sul" },
        { "MG", "Minas Gerais" },
        { "PA", "Para" },
        { "PB", "Paraíba" },
        { "PR", "Paraná" },
        { "PE", "Pernambuco" },
        { "PI", "Piauí" },
        { "RJ", "Rio de Janeiro" },
        { "RN", "Rio Grande do Norte" },
        { "RS", "Rio Grande do Sul" },
        { "RO", "Rondônia" },
        { "RR", "Roraima" },
        { "SC", "Santa Catarina" },
        { "SP", "São Paulo" },
        { "SE", "Sergipe" },
        { "TO", "Tocantins" },
    };

    [Parameter] 
    public string PlantId { get; set; } = string.Empty;
    [Parameter] 
    public string VisitId { get; set; } = string.Empty;
    public PlantModel PlantModel = new();
    private string SelectedState { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(PlantId))
        {
            PlantModel = await PlantRepository.GetAsync(PlantId);
            SelectedState = PlantModel.State;
        }
    }

    private async Task SaveOrUpdatePlant()
    {
        if (string.IsNullOrWhiteSpace(PlantId))
        {
            PlantModel.Id = Guid.NewGuid().ToString();
            await PlantRepository.CreateAsync(PlantModel);
        }
        else
        {
            await PlantRepository.UpdateAsync(PlantModel);
        }

        NavigationManager.NavigateTo("/plants");
    }
    
    private void OnChangeState()
    {
        PlantModel.State = SelectedState;
    }
    
    private void OnCancel()
    {
        NavigationManager.NavigateTo($"/main-visit/{VisitId}");
    }

}